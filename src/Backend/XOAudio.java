package Backend;
import javax.sound.sampled.*;

public class XOAudio {
  // 16 byte audio binary patterns to hold
  public final static int[] pattern_mute = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };
  public final static int[] pattern_hisq = {0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, };
  public final static int[] pattern_losq = {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, };
  public final static int[] pattern_nois = {0x62, 0x93, 0x62, 0xC9, 0x94, 0x35, 0x95, 0xCB, 0x04, 0xC5, 0xD2, 0x2A, 0xD9, 0x35, 0xD5, 0x92, };
  // 16 byte audio binary patterns currently being held, and position states
  byte[] buffer = new byte[pattern_mute.length*8]; // also unpacked
  float bufferpos = 0;
  // internal attributes
  SourceDataLine line = null;
  boolean isRunning = false;
  int samplerate;
  int framerate;
  int timer = 0;
  float frequency;
  float pitch = 64f;
  
  public int getTimer() { return timer; }
  //to unpack pattern into bufferhold (when F001 xo-chip opcode invoked)
  public void setBuffer(int[] pattern){
    for(int i=0, j=0; i < pattern.length; i++)
      for(byte shift=7;shift>=0;shift--)
        buffer[j++] = (byte)(((pattern[i]>>shift&1)!=0)?255:0);
  }
  //to set playbackrate of the buffer in unit of pitch (when Fx3A xo-chip opcode invoked)
  public void setPitch(float value){
      float freq = (int)(4000.*Math.pow(2.,(value-64.)/48.));
      frequency = freq;
      pitch = value;
  }
  
  //flush one frame of audio buffer (when chip-8 timer is ticked)
  public void bufferFrame(int amount){
    byte[] samples = new byte[800];
    float rate = frequency/samplerate;
    for(int k = 0; k < amount; k++){
      samples[k] = buffer[(int)bufferpos];
      bufferpos = (bufferpos+rate)%buffer.length;
    }
    line.write(samples, 0, samples.length);
  }
  
  Thread audioThread = new Thread(() -> {
    line.start();
    isRunning = true;
    while(isRunning){
      
      ////////////////////////// 
      // PITCH LOGGING to terminal
//        StringBuilder sb = new StringBuilder();
//        for (int i = 0; i < pitch/2; i++) sb.append(' ');
//        System.out.println(sb + "#");
      // you can omit this
      
      bufferFrame(samplerate/framerate);
      timer++;
      Thread.yield();
    }
    line.drain();
    line.close();
  });
  
  public XOAudio(int smprt, int fps) throws LineUnavailableException {
    if( !isRunning ){
      try {
        samplerate = smprt;
        framerate = fps;
        AudioFormat audioFormat = new AudioFormat( samplerate, 8, 1, false, true );
        line = AudioSystem.getSourceDataLine(audioFormat);
        line.open(audioFormat);
        setBuffer(pattern_mute);
        setPitch(64); // default pitch
        audioThread.start();
        System.out.println("outta thread");
      } catch (LineUnavailableException e){
          throw e;
      }
    }
  }
  
    public static void main(String[] args) throws LineUnavailableException {
        XOAudio xoaudio = new XOAudio(48000, 60);
        XOTracker music = new XOTracker();
        System.out.println("buffer set");
        int timer = xoaudio.getTimer();
        xoaudio.setBuffer(XOAudio.pattern_losq);
        while (true) {
            xoaudio.setPitch(music.getPitch());
            xoaudio.setBuffer(music.getBuffer()); // can be commented
            music.performTick();
            while ((timer) == (xoaudio.getTimer())) {
                Thread.yield();
            }
            timer = xoaudio.getTimer();
        }
    }
}

class XOTracker{
  // XO-Tracker port, the same driver as this https://youtube.com/watch?v=tU-_o_ukA_o
  int[] smpData = { // SAMPLE BUFFER DATA  [ 128 bytes ]
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // 0x00 |        Silence
      0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,  // 0x10 |  12.5% Pulse Duty
      0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,  // 0x20 |  25.0% Pulse Duty
      0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,  // 0x30 |  50.0% Pulse Duty
      0x41,0x47,0xE1,0xE4,0x91,0x16,0xD9,0x9D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // 0x40 |  50.0% Pulse Noise
      0x35,0x53,0xAF,0xFA,0xF8,0x87,0x04,0xC4,0x06,0xA6,0x05,0x75,0x87,0xCF,0x44,0xA8,  // 0x50 | 100.0% Pulse Noise
      0x66,0xFC,0x55,0x02,0x7F,0x83,0xC0,0xC2,0xA0,0xA3,0x70,0xF2,0x48,0x8B,0xEC,0xCE,  // 0x60 | 100.0% Pulse Noise
      0x9A,0xA9,0x57,0x7D,0xFC,0x43,0x02,0x62,0x03,0xD3,0x82,0xBA,0xC3,0x67,0x22,0x54,  // 0x70 | 100.0% Pulse Noise
      0xFF,0xFC,0x00,0x00,0xFF,0xFC,0x00,0x00,0xFF,0xFC,0x00,0x00,0xFF,0xFC,0x00,0x00,  // 0x80 | 43.25% Pulse Duty
      0xFF,0xF0,0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xF0,0x00,0x00,  // 0x90 | 37.50% Pulse Duty
      0xFF,0xC0,0x00,0x00,0xFF,0xC0,0x00,0x00,0xFF,0xC0,0x00,0x00,0xFF,0xC0,0x00,0x00,  // 0xA0 | 31.75% Pulse Duty
      0xFC,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,  // 0xB0 | 18.25% Pulse Duty
  };

  int[] instrSet = { // SAMPLE AND ORNAMENT SEQUENCE MAPPER [ 128 bytes ]
  //    0          1          2          3          4          5          6          7  
  //          8          9         10         11         12         13         14         15  
  // __________ __________ __________ __________ __________ __________ __________ __________
  //| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI| smpI ornI|
      0x00,0x00, 0x10,0x10, 0x20,0x20, 0x30,0x30, 0x80,0x01, 0x80,0x11, 0xC0,0x01, 0xC0,0x11,  // Silence + HKS & 12
      0x01,0x00, 0x11,0x10, 0x21,0x20, 0x31,0x30, 0x01,0x21, 0x40,0x21, 0x80,0x21, 0xC0,0x21,  // User-def instruments
      0x40,0x00, 0x50,0x10, 0x60,0x20, 0x70,0x30, 0x40,0x40, 0x50,0x50, 0x60,0x60, 0x70,0x70,  // 12.5% Lead + HKS +
      0x40,0x80, 0x50,0x90, 0x60,0xA0, 0x70,0xB0, 0x40,0xC0, 0x50,0xD0, 0x60,0xE0, 0x70,0xF0,  // maj-min-dim chords
      0x80,0x00, 0x90,0x10, 0xA0,0x20, 0xB0,0x30, 0x80,0x40, 0x90,0x50, 0xA0,0x60, 0xB0,0x70,  // 25.0% Lead + HKS +
      0x80,0x80, 0x90,0x90, 0xA0,0xA0, 0xB0,0xB0, 0x80,0xC0, 0x90,0xD0, 0xA0,0xE0, 0xB0,0xF0,  // maj-min-dim chords
      0xC0,0x00, 0xD0,0x10, 0xE0,0x20, 0xF0,0x30, 0xC0,0x40, 0xD0,0x50, 0xE0,0x60, 0xF0,0x70,  // 50.0% Lead + HKS +
      0xC0,0x80, 0xD0,0x90, 0xE0,0xA0, 0xF0,0xB0, 0xC0,0xC0, 0xD0,0xD0, 0xE0,0xE0, 0xF0,0xF0,  // maj-min-dim chords
  };

  int[] smpRef = { // SAMPLE SEQUENCE DATA [ 256 bytes ]
  // Loop    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15
  // PREDEFINED SAMPLE DATA
      15, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // [0x00] Silence
      15, 0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // [0x10] Hat only
      15, 0x50,0x40,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // [0x20] Kick only
      15, 0x70,0x60,0x50,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // [0x30] Snare only
      15, 0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10, // [0x40] 12.5 % Pulse Tone
      15, 0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10, // [0x50] Hat + 12.5 % Pulse
      15, 0x50,0x40,0x30,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10, // [0x60] Kick + 12.5 % Pulse
      15, 0x70,0x60,0x50,0x40,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10, // [0x70] Snare + 12.5 % Pulse
      15, 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20, // [0x80] 25 % Pulse Tone
      15, 0x70,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20, // [0x90] Hat + 25 % Pulse 
      15, 0x50,0x40,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20, // [0xA0] Kick + 25 % Pulse
      15, 0x70,0x60,0x50,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20, // [0xB0] Snare + 25 % Pulse
      15, 0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30, // [0xC0] 50 % Pulse Tone
      15, 0x70,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30, // [0xD0] Hat + 50 % Pulse
      15, 0x50,0x40,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30, // [0xE0] Kick + 50 % Pulse
      15, 0x70,0x60,0x50,0x40,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30, // [0xF0] Snare + 50 % Pulse
       8, 0x20,0xA0,0x90,0x80,0x30,0x80,0x90,0xA0,0x20,0xA0,0x90,0x80,0x30,0x80,0x90, // [0x01] 25%-50% PWM Tone
       8, 0x70,0xA0,0x90,0x80,0x30,0x80,0x90,0xA0,0x20,0xA0,0x90,0x80,0x30,0x80,0x90, // [0x11] Hat + 25%-50% PWM
       8, 0x50,0x40,0x30,0x80,0x30,0x80,0x90,0xA0,0x20,0xA0,0x90,0x80,0x30,0x80,0x90, // [0x21] Kick + 25%-50% PWM
       8, 0x70,0x60,0x50,0x40,0x30,0x80,0x90,0xA0,0x20,0xA0,0x90,0x80,0x30,0x80,0x90, // [0x31] Snare + 25%-50% PWM
    //   theres no other samples needed beside above, hence nothing.
  };

  int[] ornData = { // ORNAMENT SEQUENCE DATA [ 256 bytes ]
  //       Odd values (e.g. 63 67 71 ) is fixed pitch alter.
  //       Even values (e.g 4 8 12 -4 -8 -12 ) is relative pitch alter.
  //       Zero value won't alter the current pitch.
  // Loop    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15  
  //  PREDEFINED ORNAMENTS DATA
      13,    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // [0x00] Tone
      13,  211,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // [0x10] Hat + tone
      13,  147, 103,  67,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // [0x20] Kick + tone
      13,  107, 171, 159, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // [0x30] Snare + tone
      13,   16,  28,   0,  16,  28,   0,  16,  28,   0,  16,  28,   0,  16,  28,   0, // [0x40] Major chord tone
      13,  211,  16,  28,   0,  16,  28,   0,  16,  28,   0,  16,  28,   0,  16,  28, // [0x50] Hat + major chord
      13,  147, 103,  67,  16,  28,   0,  16,  28,   0,  16,  28,   0,  16,  28,   0, // [0x60] Kick + major chord
      13,  107, 171, 159, 147,  16,  28,   0,  16,  28,   0,  16,  28,   0,  16,  28, // [0x70] Snare + major chord
      13,   12,  28,   0,  12,  28,   0,  12,  28,   0,  12,  28,   0,  12,  28,   0, // [0x80] Minor chord tone
      13,  211,  12,  28,   0,  12,  28,   0,  12,  28,   0,  12,  28,   0,  12,  28, // [0x90] Hat + minor chord 
      13,  147, 103,  67,  12,  28,   0,  12,  28,   0,  12,  28,   0,  12,  28,   0, // [0xA0] Kick + minor chord
      13,  107, 171, 159, 147,  12,  28,   0,  12,  28,   0,  12,  28,   0,  12,  28, // [0xB0] Snare + minor chord
      13,   12,  24,   0,  12,  24,   0,  12,  24,   0,  12,  24,   0,  12,  24,   0, // [0xC0] Diminish chord tone
      13,  211,  12,  24,   0,  12,  24,   0,  12,  24,   0,  12,  24,   0,  12,  24, // [0xD0] Hat + diminish chord
      13,  147, 103,  67,  12,  24,   0,  12,  24,   0,  12,  24,   0,  12,  24,   0, // [0xE0] Kick + diminish chord
      13,  107, 171, 159, 147,  12,  24,   0,  12,  24,   0,  12,  24,   0,  12,  24, // [0xF0] Snare + diminish chord
      15,  -20, -16,  -8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // [0x01] SlideUp
      15,   20,  16,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, // [0x11] SlideDown
      10,    2,   2,   0,  -2,  -2,   0,   2,   2,   0,  -2,  -2,   0,   2,   2,   0, // [0x21] Vibratio
  };
  
  int[] seqData = { // the sequence data, song name: Tsukite the Bananafox - Kouzerumatsukite
    0x13,0x80,0x00,0x00,0x43,0x80,0x00,0x00,0x73,0x00,0x00,0x00,0x43,0x80,0x5F,0x10,
    0x57,0x88,0x00,0x00,0x57,0x88,0x00,0x00,0x57,0x8C,0x00,0x00,0x57,0x88,0x57,0x8C,
    0x00,0x00,0x57,0x8C,0x57,0x88,0x57,0xD0,0x57,0x8C,0x00,0x00,0x53,0x84,0x57,0x80,
    0x53,0x88,0x00,0x00,0x53,0x88,0x00,0x00,0x53,0x8C,0x00,0x00,0x53,0x88,0x53,0x8C,
    0x00,0x00,0x53,0x8C,0x53,0x88,0x43,0x90,0x53,0x8C,0x00,0x00,0x4B,0x84,0x43,0x80,
    0x43,0x88,0x4B,0x80,0x53,0x88,0x57,0x80,0x5F,0x8C,0x00,0x00,0x5F,0x88,0x5F,0x8C,
    0x00,0x00,0x5F,0x8C,0x5F,0x88,0x5F,0xD0,0x5F,0x8C,0x00,0x00,0x57,0x84,0x53,0x84,
    0x43,0x88,0x00,0x00,0x43,0x88,0x00,0x00,0x43,0x8C,0x43,0x90,0x43,0x88,0x43,0x8C,
    0x00,0x00,0x43,0x38,0x00,0x00,0x00,0x00,0x5F,0x8C,0x73,0xD0,0x5F,0x8C,0x5F,0x8C,
    0x43,0x88,0x4B,0x80,0x53,0x8C,0x57,0x80,0x5F,0x80,0x73,0xD8,0x57,0x8C,0x53,0x80,
    0x43,0x88,0x43,0x38,0x5F,0x8C,0x53,0x88,0x57,0x80,0x73,0xD8,0x53,0x8C,0x4B,0x80,
    0x43,0x88,0x43,0x38,0x53,0x8C,0x57,0x80,0x5F,0x80,0x73,0xD8,0x57,0x8C,0x53,0x80,
    0x43,0x88,0x43,0x38,0x5F,0x8C,0x67,0x88,0x57,0x80,0x73,0xD8,0x53,0x8C,0x4B,0x8C,
    0x43,0x88,0x2F,0x14,0x53,0x8C,0x57,0x80,0x5F,0x80,0x73,0xD8,0x57,0x8C,0x53,0x80,
    0x43,0x88,0x43,0x38,0x5F,0x8C,0x53,0x88,0x57,0x80,0x5F,0x88,0x57,0x8C,0x53,0x88,
    0x43,0x88,0x43,0x38,0x53,0x8C,0x57,0x80,0x5F,0x80,0x73,0xD8,0x57,0x8C,0x53,0x80,
    0x5F,0x88,0x73,0xD0,0x57,0x8C,0x53,0x88,0x5F,0x80,0x73,0xDC,0x67,0x8C,0x5F,0x8C,
    0x73,0x89,0x43,0xC2,0x73,0x85,0x00,0x02,0x83,0x8D,0x00,0x02,0x87,0x85,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x73,0x59,0x00,0x02,0x87,0x8D,0x37,0xC2,0x83,0x85,0x00,0x02,
    0x73,0x89,0x43,0xC2,0x73,0x85,0x00,0x02,0x8F,0x8D,0x00,0x02,0x83,0x89,0x57,0xC2,
    0x87,0x85,0x87,0x3A,0x73,0x59,0x00,0x02,0x83,0x8D,0x43,0xC2,0x7B,0x85,0x00,0x02,
    0x73,0x89,0x43,0xC2,0x73,0x85,0x00,0x02,0x83,0x8D,0x00,0x02,0x87,0x85,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x73,0x59,0x00,0x02,0x8F,0xCD,0xA3,0x1A,0xA3,0xC5,0x00,0x02,
    0x9F,0xC9,0x5F,0xC2,0x9F,0xC5,0x00,0x02,0xA3,0xCD,0x00,0x02,0x8F,0xC9,0x67,0xC2,
    0x8F,0xCD,0x8F,0x3E,0x87,0xC9,0x00,0x02,0x97,0xCD,0x00,0x02,0x8F,0xCD,0x73,0x1E,
    0x73,0x89,0x43,0xC2,0x73,0x85,0x00,0x02,0x83,0x8D,0x00,0x02,0x87,0x85,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x73,0x59,0x00,0x02,0x87,0x8D,0x37,0xC2,0x83,0x85,0x00,0x02,
    0x73,0x89,0x43,0xC2,0x73,0x85,0x00,0x02,0x8F,0x8D,0x00,0x02,0x83,0x89,0x57,0xC2,
    0x87,0x85,0x00,0x02,0x8F,0x89,0x00,0x02,0x87,0x8D,0x43,0xC2,0x83,0x85,0x00,0x02,
    0x73,0x89,0x43,0xC2,0x73,0x85,0x00,0x02,0x83,0x8D,0x00,0x02,0x87,0x85,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x73,0x59,0x00,0x02,0x8F,0x8D,0xA3,0x12,0xA3,0x85,0xA3,0x3A,
    0xAB,0x8D,0x00,0x02,0xAB,0x85,0xAB,0x3A,0xA3,0x8D,0x00,0x02,0x9F,0x8D,0x00,0x02,
    0x9F,0x85,0x9F,0x3A,0x9F,0x8D,0x8F,0x16,0x8F,0x8D,0x00,0x02,0x8F,0x8D,0x8F,0x3A,
    0xA3,0x4C,0x9F,0x80,0xA3,0x48,0x8F,0x4C,0x73,0x90,0x83,0x88,0x87,0x8C,0x87,0x38,
    0x00,0x00,0x83,0x8C,0x87,0xC8,0x83,0x88,0x87,0x8C,0x8F,0xC8,0x87,0x8C,0x83,0x8C,
    0x87,0x89,0x53,0xC2,0x83,0x85,0x73,0x92,0x87,0x8D,0x00,0x02,0x73,0x89,0x53,0xC2,
    0x73,0x85,0x00,0x02,0x73,0x89,0x73,0x3A,0x8F,0x8D,0x00,0x02,0x87,0x85,0x00,0x02,
    0x97,0x89,0x57,0xC2,0x8F,0x85,0x87,0xD2,0x8F,0x8D,0x8F,0x3A,0x8F,0x89,0x57,0xC2,
    0x87,0x85,0x87,0x82,0x83,0x89,0x83,0x3A,0x87,0x8D,0x00,0x02,0x83,0x85,0x83,0x3A,
    0x87,0x89,0x5F,0xC2,0x83,0x85,0x73,0x92,0x87,0x8D,0x00,0x02,0x8F,0x89,0x5F,0xC2,
    0x8F,0x85,0x8F,0x3A,0x9F,0x89,0xA3,0x82,0x9F,0x8D,0x00,0x02,0xA3,0x85,0x00,0x02,
    0x8F,0x89,0x57,0xC2,0x87,0x85,0x87,0xD2,0x83,0x8D,0x00,0x02,0x87,0x89,0x57,0xC2,
    0x8F,0x85,0x00,0x02,0x8F,0x89,0x00,0x02,0x8F,0x8D,0x8F,0x3A,0x8F,0x8D,0x8F,0x3A,
    0x87,0x89,0x53,0xC2,0x83,0x85,0x73,0x92,0x87,0x8D,0x00,0x02,0x83,0x89,0x53,0xC2,
    0x87,0x85,0x00,0x02,0x83,0x89,0x83,0x3A,0x87,0x8D,0x00,0x02,0x83,0x85,0x83,0x3A,
    0x83,0x89,0x57,0xC2,0x7B,0x85,0x87,0xD2,0x83,0x8D,0x00,0x02,0x7B,0x89,0x57,0xC2,
    0x83,0x85,0x00,0x02,0x7B,0x89,0x7B,0x3A,0x83,0x8D,0x00,0x02,0x87,0x85,0x00,0x02,
    0x8F,0x89,0x5F,0xC2,0x87,0x85,0x8F,0xD2,0x8F,0x8D,0x00,0x02,0x87,0x89,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x87,0x89,0x87,0x3A,0x8F,0x8D,0x00,0x02,0x87,0x85,0x00,0x02,
    0x8F,0x89,0x5F,0xC2,0x87,0x85,0x8F,0xD2,0x8F,0x8D,0x00,0x02,0x87,0x89,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x97,0x89,0x00,0x02,0x83,0x8D,0x00,0x02,0x87,0x8D,0x00,0x02,
    0x73,0x49,0x53,0xC2,0x6F,0x45,0x73,0x92,0x73,0x4D,0x00,0x02,0x8F,0x49,0x53,0xC2,
    0x8F,0x45,0x8F,0x36,0x8F,0x49,0x8F,0x36,0x87,0x4D,0x53,0xC2,0x83,0x45,0x00,0x02,
    0x87,0x49,0x57,0xC2,0x8F,0x45,0x87,0xD2,0x8F,0x4D,0x8F,0x36,0x8F,0x49,0x57,0xC2,
    0xA3,0x45,0x00,0x02,0x9F,0x49,0x00,0x02,0xA3,0x4D,0x57,0xC2,0x9F,0x45,0x00,0x02,
    0xAB,0x49,0x5F,0xC2,0xAB,0x45,0x8F,0xD2,0xA3,0x4D,0xA3,0x36,0x9F,0x49,0x5F,0xC2,
    0x8F,0x45,0x00,0x02,0x8F,0x49,0x8F,0x36,0x87,0x4D,0x5F,0xC2,0x87,0x45,0x00,0x02,
    0x83,0x49,0x57,0xC2,0x83,0x45,0x87,0x42,0x87,0x0D,0x87,0x42,0x8F,0x49,0x57,0xC2,
    0x73,0x45,0x00,0x02,0x73,0x49,0x00,0x02,0x8F,0x4D,0x57,0xC2,0x8F,0x4D,0x8F,0x36,
    0x87,0x89,0x57,0xC2,0x83,0x85,0x87,0xD2,0x87,0x8D,0x00,0x02,0x83,0x89,0x57,0xC2,
    0x87,0x85,0x00,0x02,0x83,0x89,0x00,0x02,0x87,0x8D,0x57,0xC2,0x83,0x85,0x00,0x02,
    0x83,0x89,0x53,0xC2,0x7B,0x85,0x83,0xE2,0x83,0x8D,0x00,0x02,0x7B,0x89,0x53,0xC2,
    0x83,0x85,0x00,0x02,0x7B,0x89,0x00,0x02,0x83,0x8D,0x53,0xC2,0x87,0x8D,0x00,0x02,
    0x8F,0x89,0x5F,0xC2,0x87,0x85,0x8F,0xD2,0x8F,0x8D,0x00,0x02,0x87,0x89,0x5F,0xC2,
    0x8F,0x85,0x00,0x02,0x97,0x89,0x00,0x02,0x8F,0x8D,0x5F,0xC2,0x87,0x85,0x00,0x02,
    0x73,0x8D,0x43,0xC2,0x73,0x85,0x73,0xD2,0x73,0x85,0x00,0x02,0x6F,0x8D,0x3F,0xC2,
    0x6F,0x85,0x00,0x02,0x6F,0x8D,0x00,0x02,0x6F,0x8D,0x5F,0x16,0x5F,0x8D,0x00,0x02,
  };

  int orn=0,sampPos=0,sampPosLo=0,freq=0,freqLo=0,lastSamp=0,pitch=0,notekey=0,
  ornPtr=1,smpPtr=1,tickCtr=0,tickFin=1,rowCtr=0,rowFin=8,pageCtr=0,pageFin=67,buffPtr=0;

  int[] seqTime = { // Song timeline of pages
    0 ,
    1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ,
    9 , 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 22, 23, 24,
    25, 26, 27, 28, 29, 30, 31, 32,
    33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48,
    49, 50, 51, 52, 53, 54, 55, 56,
    57, 58, 59, 60, 61, 62, 63, 64,
    65, 66,
  };

  int seqLoop = 9; // The song loop point

  int[] seqTicks = { // Ticks speed
  //  _______ _______ _______ _______ 
  // |Speed A|Speed B|Speed C|Speed D|
      9,      5,      4,      3,    
  };

  public void performTick(){
    buffPtr = smpRef[smpPtr]; // update buffer
    orn = ornData[ornPtr];
    pitch = (orn&1)==1?orn:notekey+orn;

    if((++ornPtr&15)==0){ornPtr -= 16; ornPtr += ornData[ornPtr];}
    if((++smpPtr&15)==0){smpPtr -= 16; smpPtr += smpRef[smpPtr];}
    if(++tickCtr==tickFin){ tickCtr = 0; // update row
      if(++rowCtr==rowFin){ rowCtr = 0; // update page
        if(++pageCtr==pageFin) pageCtr = seqLoop; // loop
      }
      int idx = rowCtr*2+16*seqTime[pageCtr];
      int seq = (seqData[idx]<<8)+seqData[idx+1];
      tickFin = seqTicks[seq&3]; // extract tickspeed
      if((seq >> 8)>0){
        notekey = seq >> 8; // extract pitch
        int insidx = (seq>>2&0b111111)*2;
        int ins = (instrSet[insidx]<<8)+instrSet[insidx+1]; // extract instrument
        smpPtr = ins>>8&0xF0 | (ins>>8&0xF)<<8 | 1; // sample pointer
        ornPtr = ins>>0&0xF0 | (ins>>0&0xF)<<8 | 1; // orn pointer
      }
    }
  }
  public int getPitch(){ return pitch; }
  public int[] getBuffer(){
    int[] buffer = new int[16];
    for(int i=0; i<16; i++)
      buffer[i] = smpData[buffPtr+i];
    return buffer;
  }
  
  public XOTracker(){
  }
}

//public class Main {
// 
//}
